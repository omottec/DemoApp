import com.omottec.demoapp.Deps
import com.omottec.demoapp.dependency.AarDeps

plugins {
    id 'com.omottec.demoapp.plugin'
}
apply plugin: Deps.ANDROID_LIB_PLUGIN
apply plugin: Deps.MAVEN_PUBLISH_PLUGIN
//apply plugin: Deps.BINTRAY_PLUGIN

apply from: rootProject.file('gradles/common.gradle')
apply from: rootProject.file('gradles/publish-mvncentral.gradle')

ext {
    GROUP_ID = "com.github.omottec"
    ARTIFACT_ID = 'logger'
    VERSION = '0.1.2-SNAPSHOT'
    POM_DESCRIPTION = 'android logger lib'
    POM_URL = 'https://github.com/omottec/DemoApp/tree/dev/logger'
    POM_SCM_CONNECTION = 'scm:git:github.com:omottec/DemoApp.git'
    POM_SCM_DEVELOPER_CONNECTION = 'scm:git:ssh://github.com:omottec/DemoApp.git'
    POM_SCM_URL = 'https://github.com/omottec/DemoApp/tree/dev'
}

android {
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation AarDeps.GSON
}

//bintray {
//    user = System.getenv('BINTRAY_USER')
//    key = System.getenv('BINTRAY_KEY')
//    override = false
//    publish = true
//    pkg {
//        repo = 'maven'
//        name = 'com.github.omottec:logger'
//        licenses = ['Apache-2.0']
//        vcsUrl = "https://github.com/omottec/DemoApp/tree/dev/logger"
//        version {
//            name = '0.0.8'
//            released  = new Date()
//        }
//    }
//    publications = ['mavenReleaseAar']
//}

//task androidSourcesJar(type: Jar) {
//    archiveClassifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}

//afterEvaluate {
//    publishing {
//        publications {
//            mavenReleaseAar(MavenPublication) {
//                artifact bundleReleaseAar
//                artifact androidSourcesJar
//                groupId 'com.github.omottec'
//                artifactId 'logger'
//                version '0.0.8'
//
//                // Define this explicitly if using implementation or api configurations
//                pom.withXml {
//                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
//
//                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
//                    configurations.implementation.allDependencies.each {
//                        // Ensure dependencies such as fileTree are not included.
//                        println("pom " + it.group + ":" + it.name + ":" + it.version)
//                        if (it.name != 'unspecified') {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

// ./gradlew :logger:clean :logger:bintrayUpload --no-configure-on-demand --no-parallel