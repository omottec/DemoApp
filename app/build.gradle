println(">>>>>> :app build.gradle begin")

apply plugin: BuildSrcDeps.ANDROID_APP_PLUGIN
apply plugin: BuildSrcDeps.KOTLIN_PLUGIN_ID
apply plugin: BuildSrcDeps.GREENDAO_PLUGIN
apply plugin: BuildSrcDeps.ASPECTJ_PLUGIN

apply plugin: BuildSrcDeps.OMOTTEC_ASM_PLUGIN
apply plugin: BuildSrcDeps.OMOTTEC_JAVASSIST_PLUGIN

apply plugin: BuildSrcPlugin

println("in :app:build.gradle gradle plugin:" + gradle.plugin + ", gradle.plugin1:" + gradle.plugin1)

//apply from: rootProject.file('gradles/test.gradle')
println("gradle.allComponents:" + gradle.allComponents)

apply from: rootProject.file('gradles/android_lib_common.gradle')


android {

    defaultConfig {
        applicationId "com.omottec.demoapp"
        versionCode 3
        versionName "3.0"
        multiDexEnabled true
        ndk {
            moduleName "jni-test"
        }
    }

    signingConfigs {
        release {
            storeFile file("./key/demoapp.jks")
            storePassword "demoapp007"
            keyAlias "demoapp_key"
            keyPassword "demoapp007"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
//            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "env", "region"

    productFlavors {
        development {
            dimension "env"
            applicationIdSuffix ".debug"
        }

        production {
            dimension "env"
        }

        def abi = 'armeabi-v7a'
        println("gradle.isDevelopmentBuild:${gradle.isDevelopmentBuild}, IS_ABI_64:${System.getenv("IS_ABI_64")}")
        if (gradle.isDevelopmentBuild || System.getenv("IS_ABI_64") == "true")
            abi = 'arm64-v8a'
        println("abi:" + abi)

        china {
            dimension "region"
            applicationId "com.omottec.demoapp.cn"
            ndk {
//                abiFilters 'armeabi-v7a'
//                abiFilters 'arm64-v8a'
//                abiFilters 'armeabi-v7a','arm64-v8a'
                abiFilters abi
            }
        }

        us {
            dimension "region"
            applicationId "com.omottec.demoapp.us"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

//    splits {
//
//        // Configures multiple APKs based on ABI.
//        abi {
//            println("qbb splits abi")
//
//            // Enables building multiple APKs per ABI.
//            enable true
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for armeabi-v7a and arm64-v8a.
//
//            // Resets the list of ABIs that Gradle should create APKs for to none.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "armeabi-v7a", "arm64-v8a"
//
//            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
//            universalApk false
//        }
//    }

    applicationVariants.all {variant ->
        variant.outputs.each { output ->
            def lintTask = tasks["lint${variant.name.capitalize()}"]
            println("output:" + output + ", variant:" + variant)
            println("variant.name:" + variant.name)
//            output.assembleProvider.dependsOn lintTask
            println("output.versionName:" + output.versionCode + ", output.versionCode:" + output.versionCode)
        }
    }

    variantFilter { variant ->
        println("variant.name:" + variant.name)
        println("variant.flavors.name:" + variant.flavors.name)
        println("variant.flavors*.name:" + variant.flavors*.name)
        println("variant.buildType.name:" + variant.buildType.name)
    }
}

aspectjx {
    include 'com.omottec.demoapp.aspectj'
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    //    implementation 'com.android.tools.build:gradle:3.6.1'

    testImplementation 'junit:junit:4.12'
    implementation project(':PullToRefresh')
    implementation project(':service')
    implementation project(':account')
    implementation project(':lib-a')

//        implementation project(':logger')
    implementation IncludedBuildDeps.LOGGER

    implementation IncludedBuildDeps.MULTIDEX
    implementation IncludedBuildDeps.MATERIAL
    implementation IncludedBuildDeps.APPCOMPAT
    implementation IncludedBuildDeps.CARDVIEW
    implementation IncludedBuildDeps.LEGACY_SUPPORT_V4

    //    implementation AarDeps.MCXIAOKE_VOLLEY
    //    implementation AarDeps.ANDROID_VOLLEY
    implementation IncludedBuildDeps.GSON
    implementation IncludedBuildDeps.OKHTTP3
    implementation IncludedBuildDeps.RETROFIT2_RETROFIT
    implementation IncludedBuildDeps.RETROFIT2_CONVERTER
    implementation IncludedBuildDeps.RETROFIT2_ADAPTER

    implementation IncludedBuildDeps.FRESCO_FRESCO
    implementation IncludedBuildDeps.FRESCO_IMAGEPIPELINE
    implementation IncludedBuildDeps.GLIDE_AAR
    annotationProcessor IncludedBuildDeps.GLIDE_ANNOTATION_PROCESSOR

    implementation IncludedBuildDeps.RXJAVA
    implementation IncludedBuildDeps.RXANDROID
    implementation IncludedBuildDeps.RXLIFECYCLE
    implementation IncludedBuildDeps.RXLIFECYCLE_COMPONENTS
    implementation IncludedBuildDeps.RXPERMISSIONS

    //    implementation AarDeps.RXLIFECYCLE2_ANDROID_LIFECYCLE
    //    implementation AarDeps.RXJAVA2
    //    implementation AarDeps.RXLIFECYCLE2
    //    implementation AarDeps.RXLIFECYCLE2_ANDROID
    //    implementation AarDeps.RXLIFECYCLE2_COMPONENTS

    implementation BuildSrcDeps.GREENDAO_AAR

    debugImplementation IncludedBuildDeps.LEAKCANARY_ANDROID
    releaseImplementation IncludedBuildDeps.LEAKCANARY_ANDROID_NO_OP

    implementation project(':apt-api')
    annotationProcessor project(':apt-processor')

//        annotationProcessor AarDeps.AUTO_SERVICE_ANNOTATION_PROCESSOR

    implementation IncludedBuildDeps.EPIC
    implementation BuildSrcDeps.KOTLIN_AAR
    implementation BuildSrcDeps.ASPECTJ_AAR
    implementation IncludedBuildDeps.ASM_AAR
    implementation IncludedBuildDeps.ASM_COMMON_AAR

    configurations.all { Configuration configuration ->
        configuration.resolutionStrategy.dependencySubstitution {
//                substitute module('com.github.omottec:logger') with project(':logger')
            all { DependencySubstitution substitution ->
                println("DependencySubstitution.requested:" + substitution.requested.toString())
                println("DependencySubstitution.requested:" + substitution.requested.class)
//                    if (substitution.requested.toString().contains("com.github.omottec:logger"))
//                        substitution.useTarget project(':logger')
            }
        }

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            println("DependencyResolveDetails.requested:" + details.requested.toString())
            println("DependencyResolveDetails.requested:" + details.requested.class)
//                if (details.requested.toString().contains("com.github.omottec:logger"))
//                    details.useVersion("0.1.5")
        }
    }
}

println("<<<<<< :app build.gradle end")