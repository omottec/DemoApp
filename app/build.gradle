import com.omottec.demoapp.Dependencies

apply plugin: Dependencies.ANDROID_APP_PLUGIN
apply plugin: Dependencies.KOTLIN_PLUGIN_ID
apply plugin: Dependencies.GREENDAO_PLUGIN
apply plugin: Dependencies.ASPECTJ_PLUGIN

//apply plugin: Dependencies.APPSEE_PLUGIN

// gradle_plugin_lifecycle/src/main/resources/META-INF/gradle-plugins/com.omottec.plugin.lifecycle.properties
apply plugin: Dependencies.LIFECYCLE_PLUGIN
//apply plugin: Dependencies.ASM_PLUGIN

apply from: rootProject.file('gradles/config.gradle')
apply from: rootProject.file('gradles/common.gradle')

android {

    defaultConfig {
        applicationId "com.omottec.demoapp"
        versionCode 3
        versionName "3.0"
        multiDexEnabled true
        ndk {
            moduleName "jni-test"
        }
    }

    signingConfigs {
        release {
            storeFile file("./key/demoapp.jks")
            storePassword "demoapp007"
            keyAlias "demoapp_key"
            keyPassword "demoapp007"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

//    MtjCirclePluginConfig {
//        // 设置appkey
//        appkey = '1478516c5a'
//        // 设置debug 开关，如果需要查看日志则打开开关，为避免影响性能建议上线前关闭（设置为false）
//        debug = false
//        // 默认启动此插件，如果开发者不需要可以禁用（设置为false）
//        enabled = true
//    }

    buildTypes {
        debug {
//            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "env", "region"

    productFlavors {
        development {
            dimension "env"
            applicationIdSuffix ".debug"
        }

        production {
            dimension "env"
        }

        china {
            dimension "region"
            applicationId "com.omottec.demoapp.cn"
            ndk {
                abiFilters 'armeabi-v7a'
//                abiFilters 'arm64-v8a'
//                abiFilters 'armeabi-v7a','arm64-v8a'
            }
        }

        us {
            dimension "region"
            applicationId "com.omottec.demoapp.us"
            ndk {
                abiFilters "arm64-v8a"
            }
        }
    }

    applicationVariants.all {variant ->
        variant.outputs.each { output ->
            def lintTask = tasks["lint${variant.name.capitalize()}"]
            println(">>>output:" + output + ", variant:" + variant)
            println(">>>variant.name:" + variant.name)
//            output.assembleProvider.dependsOn lintTask
            println(">>>output.versionName:" + output.versionCode + ", output.versionCode:" + output.versionCode)
        }
    }

    variantFilter { variant ->
        println(">>>" + variant.name)
        println(">>>" + variant.flavors.name)
        println(">>>" + variant.buildType.name)
    }
}

aspectjx {
    include 'com.omottec.demoapp.aspectj'
    dependencies {
        implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
        //    implementation 'com.android.tools.build:gradle:3.6.1'

        testImplementation 'junit:junit:4.12'
        implementation project(':PullToRefresh')
        implementation project(':service')
        implementation project(':account')
        implementation project(':lib_a')

//        implementation project(':logger')
        implementation Dependencies.LOGGER

        implementation Dependencies.MULTIDEX
        implementation Dependencies.MATERIAL
        implementation Dependencies.APPCOMPAT
        implementation Dependencies.CARDVIEW
        implementation Dependencies.LEGACY_SUPPORT_V4

        //    implementation Dependencies.MCXIAOKE_VOLLEY
        //    implementation Dependencies.ANDROID_VOLLEY
        implementation Dependencies.GSON
        implementation Dependencies.OKHTTP3
        implementation Dependencies.RETROFIT2_RETROFIT
        implementation Dependencies.RETROFIT2_CONVERTER
        implementation Dependencies.RETROFIT2_ADAPTER

        implementation Dependencies.FRESCO_FRESCO
        implementation Dependencies.FRESCO_IMAGEPIPELINE
        implementation Dependencies.GLIDE_AAR
        annotationProcessor Dependencies.GLIDE_ANNOTATION_PROCESSOR

        implementation Dependencies.RXJAVA
        implementation Dependencies.RXANDROID
        implementation Dependencies.RXLIFECYCLE
        implementation Dependencies.RXLIFECYCLE_COMPONENTS
        implementation Dependencies.RXPERMISSIONS

        //    implementation Dependencies.RXLIFECYCLE2_ANDROID_LIFECYCLE
        //    implementation Dependencies.RXJAVA2
        //    implementation Dependencies.RXLIFECYCLE2
        //    implementation Dependencies.RXLIFECYCLE2_ANDROID
        //    implementation Dependencies.RXLIFECYCLE2_COMPONENTS

        implementation Dependencies.GREENDAO_AAR

        debugImplementation Dependencies.LEAKCANARY_ANDROID
        releaseImplementation Dependencies.LEAKCANARY_ANDROID_NO_OP

        implementation Dependencies.APPSEE_AAR

        implementation project(':apt_api')
        annotationProcessor project(':apt_processor')

//        annotationProcessor Dependencies.AUTO_SERVICE_ANNOTATION_PROCESSOR

        implementation Dependencies.EPIC
        implementation Dependencies.KOTLIN_AAR
        implementation Dependencies.ASPECTJ_AAR

        configurations.all {
            resolutionStrategy.dependencySubstitution {
                //            substitute module('com.github.omottec:logger') with project(':logger')
                all { DependencySubstitution substitution ->
                    println(">>>substitution.requested:" + substitution.requested.toString())
                    //                if (substitution.requested.toString().contains("com.github.omottec:logger"))
                    //                    substitution.useTarget project(':logger')
                }
            }

            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                println(">>>ModuleVersionSelector")
                println(details.requested.module.toString())
                println(details.requested.group
                    + ":" + details.requested.name
                    + ":" + details.requested.version)
            }
        }
    }
}

