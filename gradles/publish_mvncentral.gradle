import com.omottec.demoapp.ImmediateDeps

apply plugin: ImmediateDeps.MAVEN_PUBLISH_PLUGIN
apply plugin: ImmediateDeps.MAVEN_SIGNING_PLUGIN

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.source
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}


afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up in a moment
                groupId GROUP_ID
                artifactId ARTIFACT_ID
                version VERSION

                // Two artifacts, the `aar` and the sources
                artifact bundleReleaseAar
                artifact androidSourcesJar

                // Self-explanatory metadata for the most part
                pom {
                    name = ARTIFACT_ID
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'omottec'
                            name = 'Jason Qin'
                            email = 'omottec@gmail.com'
                        }
                    }

                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        //Git地址：
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEVELOPER_CONNECTION
                        //分支地址：
                        url = POM_SCM_URL
                    }

                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }

        repositories {
            // The repository to publish to, Sonatype/MavenCentral
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = "mavenCentral"
                version VERSION

                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//                def releasesRepoUrl = "https://oss.sonatype.org/content/repositories/releases/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    // https://www.gnupg.org/download/index.html
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}